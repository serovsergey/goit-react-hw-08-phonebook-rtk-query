{"version":3,"file":"static/js/157.d265aafa.chunk.js","mappings":"iRACA,EAA4B,gCAA5B,EAAmE,2B,iDC+FnE,EApFqB,WACnB,OAAgCA,EAAAA,EAAAA,MAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KAAiBA,UACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,GACI,mBACPE,SAAS,oBACZC,MAAOH,EAAAA,GACG,oBACPG,MAAM,uBACND,SAAS,qBACZE,SAAUJ,EAAAA,GACA,uBACPK,IAAI,EAAG,qDACPH,SAAS,0BAGRI,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbP,KAAM,GACNE,MAAO,GACPC,SAAU,IAEZL,iBAAAA,EACAU,SAAU,SAAAC,GAERf,EAAOe,GAAQC,SACZC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZhB,GAASmB,EAAAA,EAAAA,IAAeH,IACxBI,EAAAA,GAAAA,KAAW,uBACZ,IACAC,OAAM,SAACC,GAAD,OAAWF,EAAAA,GAAAA,MAAA,2CAAgDG,KAAKC,UAAUF,IAA1E,GACV,IAGH,OACE,UAACG,EAAA,EAAD,CAAOC,UAAW,EAAGC,UAAWC,EAAhC,WACE,SAACC,EAAA,EAAD,CAAYC,UAAW,KAAMC,QAAS,KAAMC,MAAO,SAAnD,gCAGA,kBAAMpB,SAAUH,EAAOwB,aAAcN,UAAWC,EAAhD,WACE,SAACM,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,OACHhC,KAAK,OACLiC,MAAM,OACNC,MAAO7B,EAAOI,OAAOT,KACrBmC,SAAU9B,EAAO+B,aACjBlB,MAAOb,EAAOgC,QAAQrC,MAAQsC,QAAQjC,EAAOkC,OAAOvC,MACpDwC,WAAYnC,EAAOgC,QAAQrC,MAAQK,EAAOkC,OAAOvC,QAEnD,SAAC8B,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,QACHhC,KAAK,QACLiC,MAAM,QACNC,MAAO7B,EAAOI,OAAOP,MACrBiC,SAAU9B,EAAO+B,aACjBlB,MAAOb,EAAOgC,QAAQnC,OAASoC,QAAQjC,EAAOkC,OAAOrC,OACrDsC,WAAYnC,EAAOgC,QAAQnC,OAASG,EAAOkC,OAAOrC,SAEpD,SAAC4B,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,WACHhC,KAAK,WACLiC,MAAM,WACNQ,KAAK,WACLP,MAAO7B,EAAOI,OAAON,SACrBgC,SAAU9B,EAAO+B,aACjBlB,MAAOb,EAAOgC,QAAQlC,UAAYmC,QAAQjC,EAAOkC,OAAOpC,UACxDqC,WAAYnC,EAAOgC,QAAQlC,UAAYE,EAAOkC,OAAOpC,YAEvD,UAACuC,EAAA,EAAD,CAAQC,MAAM,UAAUhB,QAAQ,YAAYc,KAAK,SAASG,SAAUjD,EAApE,2BACmBA,IAAa,SAACkD,EAAA,EAAD,CAAkBC,KAAM,aAK/D,C","sources":["webpack://react-homework-template/./src/pages/RegisterPage/registerPage.module.scss?6e71","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"registerPage_container__mZ5HJ\",\"form\":\"registerPage_form__-TYnA\"};","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Button, Paper, TextField, Typography, CircularProgress } from '@mui/material';\n\nimport s from './registerPage.module.scss';\nimport { toast } from 'react-toastify';\nimport { useSignupMutation } from 'services/contacts.api';\nimport { setCredentials } from 'redux/auth/auth.slice';\nimport { useDispatch } from 'react-redux';\n\nconst RegisterPage = () => {\n  const [signup, { isLoading }] = useSignupMutation();\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object({\n    name: yup\n      .string('Enter your name')\n      .required('Name is required'),\n    email: yup\n      .string('Enter your email')\n      .email('Enter a valid email')\n      .required('Email is required'),\n    password: yup\n      .string('Enter your password')\n      .min(8, 'Password should be of minimum 8 characters length')\n      .required('Password is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema,\n    onSubmit: values => {\n\n      signup(values).unwrap()\n        .then((user) => {\n          console.log(user)\n          dispatch(setCredentials(user));\n          toast.info('You have registered!')\n        })\n        .catch((error) => toast.error(`Failed to register with error: \\n${JSON.stringify(error)}`))\n    },\n  });\n\n  return (\n    <Paper elevation={4} className={s.container}>\n      <Typography component={'h2'} variant={'h4'} align={'center'}>\n        Register new user\n      </Typography>\n      <form onSubmit={formik.handleSubmit} className={s.form}>\n        <TextField\n          fullWidth\n          id=\"name\"\n          name='name'\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          fullWidth\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n        <TextField\n          fullWidth\n          id=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n        <Button color=\"primary\" variant=\"contained\" type=\"submit\" disabled={isLoading}>\n          Register &nbsp; {isLoading && <CircularProgress size={24} />}\n        </Button>\n      </form>\n    </Paper>\n  )\n};\n\n// RegisterPage.propTypes = {};\n\nexport default RegisterPage;\n"],"names":["useSignupMutation","signup","isLoading","dispatch","useDispatch","validationSchema","yup","name","required","email","password","min","formik","useFormik","initialValues","onSubmit","values","unwrap","then","user","console","log","setCredentials","toast","catch","error","JSON","stringify","Paper","elevation","className","s","Typography","component","variant","align","handleSubmit","TextField","fullWidth","id","label","value","onChange","handleChange","touched","Boolean","errors","helperText","type","Button","color","disabled","CircularProgress","size"],"sourceRoot":""}